Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 1
c:proj1.asm



      1				     INCLUDELIB	iofar
      2				     ;****** BEGIN MAIN	PROGRAM	************************************
      3					     DOSSEG
      4					     .186
      5	0000				     .model large
      6	0000				     .stack 200h
      7
      8				     ;****** MAIN PROGRAM DATA SEGMENT *****************************
      9	0000				      .data
     10	0000  45 6E 74 65 72 20	69+  Prompt1  db  'Enter integers #$'
     11	      6E 74 65 67 65 72	73+
     12	      20 23 24
     13	0011  3A 20 24		     Prompt2  db  ': $'
     14	0014  0A*(0000)		     arr1  dw  10 dup(0)     ; an array	of integers, will be passed for	insertion Sort later
     15	0028  0A*(0000)		     arr2  dw  10 dup(0)     ; copied version of arr1
     16	003C  000A		     iNum dw  10	     ; total number of items in	arr1
     17	003E  0001		     Count    dw  1	     ; input counter
     18	0040  54 68 65 20 69 6E	70+  MsgEcho  db  'The input was:$'
     19	      75 74 20 77 61 73	3A+
     20	      24
     21	004F  55 6E 73 6F 72 74	65+  MsgUnsorted      db  'Unsorted List $'
     22	      64 20 4C 69 73 74	20+
     23	      24
     24	005E  53 6F 72 74 65 64	20+  MsgSorted	      db  'Sorted List $'
     25	      4C 69 73 74 20 24
     26	006B  20 24		     Space1    db ' $'	     ; for the use of format adjustment
     27	006D  20 20 20 20 20 20	20+  Space2    db '	  $' ; for the use of format adjustment
     28	      24
     29
     30				     ;****** MAIN PROGRAM Ô∏èCODE SEGMENT *****************************
     31	0075				     .code
     32					     extrn   PutStr: PROC, PutCrLf: PROC
     33					     extrn   GetDec: PROC, PutDec: PROC
     34
     35	0000			     ProgramStart   PROC
     36
     37				     ; Initialize ds register to hold data segment address
     38	0000  B8 0000s			     mov     ax,@data
     39	0003  8E D8			     mov     ds,ax
     40
     41				     ; Call procedure Greet to print introductory messages to the user
     42	0005  E8 012C			     call    Greet	     ; call subroutine to print	greeting
     43
     44				     ; Print prompt message to the user
     45	0008  BA 0000r			     mov     dx,OFFSET Prompt1	 ; let DS register point to the	Prompt1's address
     46	000B  B4 09			     mov     ah,9		 ; DOS print string function #
     47	000D  CD 21			     int     21h		     ; print string
     48
     49				     ; Print the item number value as part of prompt
     50	000F  A1 003Er			 mov ax,Count	      ;	put parameter for subroutine PutDec in ax
     51	0012  0E E8 0000e		     call    PutDec	  ; print the decimal integer in ax, not in new	line
     52
     53				     ; Finish the prompt string
     54	0016  BA 0011r			     mov     dx,OFFSET Prompt2	; point	to the Prompt mesg
     55	0019  B4 09			     mov     ah,9		; DOS print string function #
     56	001B  CD 21			     int     21h		    ; print string
     57
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 2
c:proj1.asm



     58				     ; Input an	integer	from the user keyboard and assign it to	arr[]
     59	001D  0E E8 0000e		     call    GetDec	    ; integer from keyboard returned in	ax (only integers are	    +
     60				     accepted)
     61	0021  2B F6			     sub si,si
     62	0023  89 84 0014r		     mov [arr1+si],ax	    ; store input value	in array location
     63
     64				     ; Print for Verification
     65				       ; Print message
     66	0027  BA 0040r			     mov     dx,OFFSET MsgEcho	; point	to the output mesg
     67	002A  B4 09			     mov     ah,9		; DOS print string function #
     68	002C  CD 21			     int     21h		    ; print string
     69				       ; Print the input integer
     70	002E  8B 84 0014r		     mov     ax,[arr1+si]	  ; put	parameter for subroutine PutDec	in ax
     71	0032  0E E8 0000e		     call    PutDec	      ;	print the decimal integer in ax
     72	0036  0E E8 0000e		     call    PutCrLf
     73	003A  0E E8 0000e		     call    PutCrLf
     74
     75				     ; Increment index of the array and	counter
     76	003E  83 C6 02			     add si,2		   ; increase the index	of the array
     77	0041  FF 06 003Er		     inc     Count
     78
     79	0045			     WHILE01:	     ;	Count <	total item number of the array
     80	0045  A1 003Er			     mov     ax, Count	     ; assign Count to ax
     81	0048  3B 06 003Cr		     cmp     ax, iNum
     82	004C  7F 3D			     jnle    ENDWHL01	 ; if >
     83	004E			     DO01:	 ; Input integer, print	it
     84					; Print	prompt message to the user
     85	004E  BA 0000r			     mov     dx,OFFSET Prompt1	 ; point to the	Prompt mesg
     86	0051  B4 09			     mov     ah,9		 ; DOS print string function #
     87	0053  CD 21			     int     21h		     ; print string
     88					; Print	the Count value	as part	of prompt
     89	0055  A1 003Er			     mov     ax,Count		 ; put parameter for subroutine	PutDec in ax
     90	0058  0E E8 0000e		     call    PutDec	     ; print the decimal integer in ax
     91					; Finish the prompt string
     92	005C  BA 0011r			     mov     dx,OFFSET Prompt2	 ; point to the	Prompt mesg
     93	005F  B4 09			     mov     ah,9		 ; DOS print string function #
     94	0061  CD 21			     int     21h		     ; print string
     95
     96				       ; Input an integer from the user	keyboard and assign it to N
     97	0063  0E E8 0000e		     call    GetDec	     ; integer from keyboard returned in ax
     98	0067  89 84 0014r		     mov [arr1+si],ax	     ; store input value in array location
     99
    100				     ; Print for Verification
    101	006B  BA 0040r			     mov     dx,OFFSET MsgEcho	 ; point to the	output mesg
    102	006E  B4 09			     mov     ah,9		 ; DOS print string function #
    103	0070  CD 21			     int     21h		     ; print string
    104
    105				       ; Print the input integer
    106	0072  8B 84 0014r		     mov     ax,[arr1+si]	 ; put parameter for subroutine	PutDec in ax
    107	0076  0E E8 0000e		     call    PutDec	     ; print the decimal integer in ax
    108	007A  0E E8 0000e		     call    PutCrLf
    109	007E  0E E8 0000e		     call    PutCrLf
    110
    111				       ; Increment Count and repeat the	loop
    112	0082  FF 06 003Er		     inc     Count
    113	0086  83 C6 02			     add si,2		   ; increase the index	of the array
    114	0089  EB BA			     jmp     WHILE01
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 3
c:proj1.asm



    115				     ; End of while loop
    116	008B			     ENDWHL01:
    117	008B  90			 nop
    118
    119				     ; Copy arr1 into arr2 for printing	unsorted version later:
    120	008C  2B F6			 sub si,si    ;	initialize array index
    121	008E  8B 0E 003Cr		 mov cx,iNum  ;	loop for 10 times
    122	0092			     S0:
    123	0092  FF B4 0014r		 push [arr1+si]	; copying arr1[si] into	arr2[si]
    124	0096  8F 84 0028r		 pop  [arr2+si]
    125	009A  83 C6 02			 add si,2	; increase the index(word type)
    126	009D  E2 F3			 loop S0
    127
    128				     ; InsertSort(iNum,arr1)
    129	009F  FF 36 003Cr		 push iNum	     ; push number of items in arr1
    130	00A3  68 0014r			     push OFFSET arr1	 ; push	arr1 address
    131	00A6  E8 0043			 call	 InsertSort  ; Sort arr1
    132
    133				     ; Print label at the top of each column
    134	00A9  BA 004Fr			     mov     dx,OFFSET MsgUnsorted ; set pointer to MsgUnsorted	message
    135	00AC  B4 09			     mov     ah,9		   ; DOS print string function #
    136	00AE  CD 21			     int     21h		       ; print string
    137
    138	00B0  BA 005Er			     mov     dx,OFFSET MsgSorted ; set pointer to MsgSorted message
    139	00B3  B4 09			     mov     ah,9		 ; DOS print string function #
    140	00B5  CD 21			     int     21h		     ; print string
    141	00B7  0E E8 0000e		     call    PutCrLf
    142
    143				     ; Print arr1 and arr2
    144	00BB  2B F6			 sub si,si    ;	initialize si
    145	00BD  8B 0E 003Cr		 mov cx,iNum  ;	loop time for printing items in	array
    146	00C1			     S1:
    147					 ; Print whitespace(adjust format)
    148	00C1  BA 006Br			     mov     dx,OFFSET Space1
    149	00C4  B4 09			     mov     ah,9
    150	00C6  CD 21			     int     21h
    151					 ; pinrt arr2(unsorted version)
    152	00C8  8B 84 0028r		 mov ax,[arr2+si]		; put arr2 item	for subroutine PutDec in ax
    153	00CC  0E E8 0000e		 call	     PutDec		    ; print the	decimal	integer	in ax
    154					 ; Print whitespace(adjust format)
    155	00D0  BA 006Dr			     mov     dx,OFFSET Space2
    156	00D3  B4 09			     mov     ah,9
    157	00D5  CD 21			     int     21h
    158					 ; print arr1(sorted version)
    159	00D7  8B 84 0014r		 mov ax,[arr1+si]		; put arr1 item	for subroutine PutDec in ax
    160	00DB  0E E8 0000e		 call	     PutDec		    ; print the	decimal	integer	in ax
    161	00DF  0E E8 0000e		 call	 PutCrLf
    162	00E3  83 C6 02			 add si,2
    163	00E6  E2 D9			 loop S1
    164
    165				     ; Exit to the operating system
    166	00E8  B4 4C			     mov     ah,4ch	  ; DOS	terminate program fn #
    167	00EA  CD 21			     int     21h
    168	00EC			     ProgramStart    ENDP
    169
    170				     comment |
    171				     ******* PROCEDURE HEADER **************************************
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 4
c:proj1.asm



    172				       PROCEDURE NAME :	InsertSort
    173				       PURPOSE :  To sort 10 integers using Insertion Sort in Ascending	Order
    174						     Returns: None
    175				       INPUT PARAMETERS
    176						 pass by value,	number of items	in an array
    177						 pass by reference, address of an array
    178				       OUTPUT PARAMETERS: None
    179				       NON-LOCAL VARIABLES REFERENCED: None
    180				       NON-LOCAL VARIABLES MODIFIED :None
    181				       PROCEDURES CALLED :
    182				       CALLED FROM : Main Program
    183				     |
    184				     ;****** SUBROUTINE	CODE SEGMENT ********************************
    185	00EC				     .code
    186	00EC			     InsertSort	PROC	near
    187				     ; Save registers on the stack and set up bp register
    188	00EC  55			 push bp
    189	00ED  8B EC			     mov  bp,sp
    190	00EF  53			     push bx
    191	00F0  56			     push si
    192	00F1  57			     push di
    193					 ; bp +	6: the number of items in the array
    194					 ; bp +	4: array
    195
    196					 ; setting CX as the actual size of the	array
    197	00F2  8B 46 06			 mov ax,[bp+6] ; setting ax = 10
    198	00F5  B9 0002			 mov cx,2	; 2 byte per word
    199	00F8  F7 E1			 mul cx
    200	00FA  8B C8			 mov cx,ax
    201
    202					 ; 'i' and 'j' increase	by 2 due to word size
    203	00FC  BE 0002			 mov si,2	; SI is	i and i	= 2
    204	00FF  2B FF			 sub di,di	; DI is	j, setting it to 0
    205	0101  8B 5E 04			 mov bx,[bp+4]	; copy address of arr1 into BX,	BX is the array	now.
    206
    207				     ; Outter loop begins here:
    208	0104			      OUTLOOP:	   ; i < len
    209	0104  3B F1			 cmp si,cx
    210	0106  7D 24			 jge ENDOUTLOOP	; if i >= len, end outter loop
    211
    212	0108  8B 10			 mov dx,[bx+si]	; dx is	the key	(key = arr[i])
    213
    214	010A  8B FE			 mov di,si
    215	010C  83 EF 02			 sub di,2    ; bx is j = i - 1
    216	010F  83 C6 02			 add si,2    ; i++
    217
    218	0112  50			 push ax     ; need to use ax in inner loop, store first
    219				     ; Inner loop begins here:
    220	0113			     INLOOP:	 ; (j >= 0 && arr[j] > key)
    221	0113  83 FF 00			 cmp di,0 ;  if	j < 0, exit INLOOP
    222	0116  7C 0E			 jnge ENDINLOOP
    223
    224	0118  39 11			 cmp [bx+di],dx	; if arr[j] <= key, exit INLOOP
    225	011A  7E 0A			 jle ENDINLOOP
    226
    227	011C  8B 01			 mov ax,[bx+di]	; arr[j	+ 1] = arr [j]
    228	011E  89 41 02			 mov [bx+di+2],ax ;
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 5
c:proj1.asm



    229
    230	0121  83 EF 02			 sub di,2   ; j--
    231
    232	0124  EB ED			 jmp INLOOP ; loop back	to INLOOP
    233
    234	0126			     ENDINLOOP:
    235	0126  89 51 02			 mov [bx+di+2],dx ; array[j+1] = key ;
    236	0129  58			 pop ax	 ; restore ax before outter loop begins
    237	012A  EB D8			 jmp OUTLOOP ; back to Outter Loop
    238
    239	012C			     ENDOUTLOOP:
    240	012C  90			 nop
    241				     ; restore registers
    242	012D  5F			 pop di
    243	012E  5E			 pop si
    244	012F  5B			 pop bx
    245	0130  5D			 pop bp
    246				     ; restore the remaining elements(iNum, array address)
    247	0131  C2 0004			     ret     4
    248
    249	0134			     InsertSort	ENDP
    250
    251				     comment |
    252				     ******* PROCEDURE HEADER **************************************
    253				       PROCEDURE NAME :	Greet
    254				       PURPOSE :  To print initial greeting messages to	the user
    255				       INPUT PARAMETERS	: None
    256				       OUTPUT PARAMETERS or RETURN VALUE:  None
    257				       NON-LOCAL VARIABLES REFERENCED: None
    258				       NON-LOCAL VARIABLES MODIFIED :None
    259				       PROCEDURES CALLED :	     ;
    260					     FROM iofar.lib: PutCrLf	 ;
    261				       CALLED FROM : main program    ;
    262				     |
    263				     ;****** SUBROUTINE	DATA SEGMENT ********************************
    264	0134				     .data
    265	0075  50 72 6F 67 72 61	6D+  Msgg1    db  'Program:    Insortion Sort for Ten Integers in Ascending Order $'
    266	      3A 20 20 20 20 49	6E+
    267	      73 6F 72 74 69 6F	6E+
    268	      20 53 6F 72 74 20	66+
    269	      6F 72 20 54 65 6E	20+
    270	      49 6E 74 65 67 65	72+
    271	      73 20 69 6E 20 41	73+
    272	      63 65 6E 64 69 6E	67+
    273	      20 4F 72 64 65 72	20+
    274	      24
    275	00B5  50 72 6F 67 72 61	6D+  Msgg2    db  'Programmer: Jian Zhong $'
    276	      6D 65 72 3A 20 4A	69+
    277	      61 6E 20 5A 68 6F	6E+
    278	      67 20 24
    279	00CD  44 61 74 65 3A 20	20+  Msgg3    db  'Date:       March 29, 2020 $'
    280	      20 20 20 20 20 4D	61+
    281	      72 63 68 20 32 39	2C+
    282	      20 32 30 32 30 20	24
    283
    284				     ;****** SUBROUTINE	CODE SEGMENT ********************************
    285	00E9				     .code
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 6
c:proj1.asm



    286	0134			     Greet   PROC    near
    287
    288				     ; Initialize ds register to hold data segment address
    289	0134  B8 0000s			     mov     ax,@data
    290	0137  8E D8			     mov     ds,ax
    291
    292				     ; Save registers on the stack
    293	0139  60			     pusha
    294	013A  9C			     pushf
    295
    296				     ; Print name of program
    297	013B  BA 0075r			     mov     dx,OFFSET Msgg1 ; set pointer to 1st greeting message
    298	013E  B4 09			     mov     ah,9	     ; DOS print string	function #
    299	0140  CD 21			     int     21h	     ; print string
    300	0142  0E E8 0000e		     call    PutCrLf
    301
    302				     ; Print name of programmer
    303	0146  BA 00B5r			     mov     dx,OFFSET Msgg2 ; set pointer to 2nd greeting message
    304	0149  B4 09			     mov     ah,9	     ; DOS print string	function #
    305	014B  CD 21			     int     21h	     ; print string
    306	014D  0E E8 0000e		     call    PutCrLf
    307
    308				     ; Print date
    309	0151  BA 00CDr			     mov     dx,OFFSET Msgg3 ; set pointer to 3rd greeting message
    310	0154  B4 09			     mov     ah,9	     ; DOS print string	function #
    311	0156  CD 21			     int     21h	     ; print string
    312	0158  0E E8 0000e		     call    PutCrLf
    313
    314				     ; Restore registers from stack
    315	015C  9D			     popf
    316	015D  61			     popa
    317
    318				     ; Return to caller	module
    319	015E  C3			     ret
    320	015F			     Greet   ENDP
    321					     end     ProgramStart
Turbo Assembler	 Version 3.1	    04/23/20 19:44:45	    Page 7
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??date			Text   "04/23/20"
??filename		Text   "proj1	"
??time			Text   "19:44:45"
??version		Number 030A
@32Bit			Text   0			   #5
@CodeSize		Text   1			   #5
@Cpu			Text   0103H			   #4
@DataSize		Text   1			   #5
@FileName		Text   proj1
@Interface		Text   00h			   #5
@Model			Text   5			   #5
@WordSize		Text   2			   #4  #9  #31	#185  #264  #285
@code			Text   proj1_TEXT		   #5  #5  #31	#185  #285
@curseg			Text   proj1_TEXT		   #9  #31  #185  #264	#285
@data			Text   DGROUP			   #5  38  289
@stack			Text   DGROUP			   #5
Count			Word   DGROUP:003E		   #17	50  77	80  89	112
DO01			Near   proj1_TEXT:004E		   #83
ENDINLOOP		Near   proj1_TEXT:0126		   222	225  #234
ENDOUTLOOP		Near   proj1_TEXT:012C		   210	#239
ENDWHL01		Near   proj1_TEXT:008B		   82  #116
GetDec			Far    proj1_TEXT:---- Extern	   #33	59  97
Greet			Near   proj1_TEXT:0134		   42  #286
INLOOP			Near   proj1_TEXT:0113		   #220	 232
InsertSort		Near   proj1_TEXT:00EC		   131	#186
MsgEcho			Byte   DGROUP:0040		   #18	66  101
MsgSorted		Byte   DGROUP:005E		   #24	138
MsgUnsorted		Byte   DGROUP:004F		   #21	134
Msgg1			Byte   DGROUP:0075		   #265	 297
Msgg2			Byte   DGROUP:00B5		   #275	 303
Msgg3			Byte   DGROUP:00CD		   #279	 309
OUTLOOP			Near   proj1_TEXT:0104		   #208	 237
ProgramStart		Far    proj1_TEXT:0000		   #35	321
Prompt1			Byte   DGROUP:0000		   #10	45  85
Prompt2			Byte   DGROUP:0011		   #13	54  92
PutCrLf			Far    proj1_TEXT:---- Extern	   #32	72  73	108  109  141  161  300	 306  312
PutDec			Far    proj1_TEXT:---- Extern	   #33	51  71	90  107	 153  160
PutStr			Far    proj1_TEXT:---- Extern	   #32
S0			Near   proj1_TEXT:0092		   #122	 126
S1			Near   proj1_TEXT:00C1		   #146	 163
Space1			Byte   DGROUP:006B		   #26	148
Space2			Byte   DGROUP:006D		   #27	155
WHILE01			Near   proj1_TEXT:0045		   #79	114
arr1			Word   DGROUP:0014		   #14	62  70	98  106	 123  130  159
arr2			Word   DGROUP:0028		   #15	124  152
iNum			Word   DGROUP:003C		   #16	81  121	 129  145

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #5  5  38  289
  STACK			16  0200 Para	Stack	STACK	   #6
  _DATA			16  00E9 Word	Public	DATA	   #5  #9  #264
proj1_TEXT		16  015F Word	Public	CODE	   #5  5  #31  31  #185	 185  #285  285
