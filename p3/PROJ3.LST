Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 1
c:proj3.ASM



      1				     comment |
      2				     ***************************************************************
      3				     Programmer:  Jian Zhong
      4				     Date      :  Apr 30th, 2020
      5				     Course    :  CS221	- Machine Organization & Assembly Lang.	Programming
      6				     Project   :  This program uses a recursive	procedure to
      7						       compute the nth value of	the Fibonacci series
      8
      9				     Assembler :  Borland TASM 3.0
     10				     File Name :  proj3.asm
     11
     12				     Input  :  An positive integer.
     13				     Output :  Value of	the Fibonacci series by	input number.
     14
     15				     PROCEDURES	CALLED:
     16					 External procedures called:
     17					     FROM iofar.lib: PutStr, PutCrLf, GetDec, PutDec
     18					 Internal procedures called:
     19					     Greet, Find_Fib
     20				     |
     21
     22				     ;****** BEGIN MAIN	PROGRAM	************************************
     23					 DOSSEG
     24					 .186
     25	0000				 .model	large
     26	0000				 .stack	200h
     27
     28				     ;****** MAIN PROGRAM DATA SEGMENT *****************************
     29	0000				  .data
     30	0000  50 6C 65 61 73 65	20+  PromptFibNum    db	 'Please enter an integer for nth value	of Fibonacci series: $'
     31	      65 6E 74 65 72 20	61+
     32	      6E 20 69 6E 74 65	67+
     33	      65 72 20 66 6F 72	20+
     34	      6E 74 68 20 76 61	6C+
     35	      75 65 20 6F 66 20	46+
     36	      69 62 6F 6E 61 63	63+
     37	      69 20 73 65 72 69	65+
     38	      73 3A 20 24
     39	003C  2A 2A 2A 20 49 6E	70+  PromptTryAgain  db	 '*** Input should be integer >= 0 ***,	please try again: $'
     40	      75 74 20 73 68 6F	75+
     41	      6C 64 20 62 65 20	69+
     42	      6E 74 65 67 65 72	20+
     43	      3E 3D 20 30 20 2A	2A+
     44	      2A 2C 20 70 6C 65	61+
     45	      73 65 20 74 72 79	20+
     46	      61 67 61 69 6E 3A	20+
     47	      24
     48	0075  54 68 65 20 69 6E	74+  NumEcho	     db	 'The integer you entered was:$'
     49	      65 67 65 72 20 79	6F+
     50	      75 20 65 6E 74 65	72+
     51	      65 64 20 77 61 73	3A+
     52	      24
     53	0092  54 68 65 20 46 69	62+  FibEcho	     db	 'The Fibonacci	series is shown	as below:$'
     54	      6F 6E 61 63 63 69	20+
     55	      73 65 72 69 65 73	20+
     56	      69 73 20 73 68 6F	77+
     57	      6E 20 61 73 20 62	65+
Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 2
c:proj3.ASM



     58	      6C 6F 77 3A 24
     59	00BA  ????		     Num	     dw	 ? ; Number entered by user for	computing Fib sequence
     60	00BC  0000		     i		     dw	 0 ; index of Fibonacci	series
     61
     62
     63				     ;****** MAIN PROGRAM CODE SEGMENT *****************************
     64	00BE				 .code
     65					 extrn	  PutCrLf: PROC
     66					 extrn	  GetDec: PROC,	PutDec:	PROC
     67
     68	0000			     ProgramStart   PROC  NEAR
     69
     70				     ; Initializing ds register	to hold	data segment address
     71	0000  B8 0000s			 mov ax,@data
     72	0003  8E D8			 mov ds,ax
     73
     74				     ; Call procedure Greet to print introductory messages to the user
     75	0005  E8 00A1			 call	 Greet		       ; void Greet()
     76
     77				     ; cout << "Please enter a Number for computing Fib	sequence: ";
     78	0008			     WHILE_01:
     79	0008  BA 0000r			 mov dx,OFFSET PromptFibNum    ; point to the PromptFibNum
     80	000B  B4 09			 mov ah,9		       ; DOS print string function #
     81	000D  CD 21			 int 21h		       ; print string
     82
     83				     ; Fetch input integer from	user and store into "Num" para
     84	000F  0E E8 0000e		 call	 far ptr GetDec	       ; get integer from keyboard, return in ax
     85	0013  0E E8 0000e		 call	 far ptr PutCrLf       ; /n
     86	0017  A3 00BAr			 mov Num,ax		       ; load user input in Num
     87
     88				     ; Print to	verify the number was correctly	input:
     89					 ; cout	<< ''The number	you entered was: '';
     90	001A  BA 0075r			 mov dx,OFFSET NumEcho	       ; point to the NumEcho mesg
     91	001D  B4 09			 mov ah,9		       ; DOS print string function #
     92	001F  CD 21			 int 21h			   ; print string
     93					 ; cout	<< Num;
     94	0021  A1 00BAr			 mov ax,Num		       ; put parameter for subroutine PutDec in	ax
     95	0024  0E E8 0000e		 call	     PutDec		   ; print the decimal integer in ax
     96	0028  0E E8 0000e		 call	 PutCrLf
     97	002C  0E E8 0000e		 call	 PutCrLf
     98
     99				     ; Verify if the input is negative:
    100	0030  83 3E 00BAr 00		 cmp Num, 0		       ; while (Num < 0)
    101	0035  7C 03			 jl	 TryAgain_01	       ; if Num	< 0, prompt user to try	again
    102	0037  EB 12 90			 jmp	 ENDWHILE_01	       ; valid input, end while	loop
    103
    104				     ; Num < 0:
    105	003A			     TryAgain_01:
    106	003A  BA 003Cr			 mov dx,OFFSET PromptTryAgain  ; set pointer to	PromptTryAgain mesg
    107	003D  B4 09			 mov ah,9		       ; DOS print string function #
    108	003F  CD 21			 int 21h		       ; print string
    109	0041  0E E8 0000e		 call	 PutCrLf
    110	0045  0E E8 0000e		 call	 PutCrLf
    111	0049  EB BD			 jmp	 WHILE_01	       ; jump back to try again
    112
    113	004B			     ENDWHILE_01:		       ; End of	WHILE_01 LOOP
    114
Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 3
c:proj3.ASM



    115				     ; cout << "The Fibonacci Series is	";
    116	004B  BA 0092r			 mov dx,OFFSET FibEcho	       ; point to the FibEcho mesg
    117	004E  B4 09			 mov ah,9		       ; DOS print string function #
    118	0050  CD 21			 int 21h			   ; print string
    119	0052  0E E8 0000e		 call	 far ptr PutCrLf       ; /n
    120
    121				     ; Print the entire	Fibonacci Series:
    122				     ; ****************************************
    123				     ; Note: if	the input is 7,
    124				     ; the series will display from f(0) to f(7),
    125				     ; total is	8 numbers in the Fib series.
    126				     ; ****************************************
    127				     ; for (int	i = 0; i <= Num; i++);
    128	0056  8B 16 00BAr	     mov dx,Num			       ; load Num into dx
    129	005A			     FOR01:
    130	005A  39 16 00BCr		 cmp i,dx		       ; i <= Num ?
    131	005E  7F 13			 jg END_FOR01		       ; i > Num, end the loop
    132					 ; cout	<< find_Fib(i) << " ";
    133	0060  FF 36 00BCr		 push i			       ; pass Num parameter for	Find_Fib PROC
    134	0064  E8 0014			 call	 Find_Fib	       ; call Find_Fib PROC to compute Fib Series
    135	0067  8B C1			 mov ax,cx		       ; store cx(result) into ax
    136	0069  0E E8 0000e		 call	      PutDec		   ; print the result in ax
    137	006D  FF 06 00BCr		 inc i			       ; i++
    138	0071  EB E7			 jmp FOR01
    139	0073			     END_FOR01:
    140	0073  0E E8 0000e		 call	 far ptr PutCrLf       ; /n
    141
    142	0077  B4 4C			 mov	ah,4ch	  ; DOS	terminate program fn #
    143	0079  CD 21			 int	21h
    144	007B			     ProgramStart    ENDP ; end	of main	program
    145
    146
    147				     ;------------------------------------------------------
    148				     ; Procddure Name: Find_Fib
    149				     ;
    150				     ; Purpose : Compute the value of the Fibonacci series of Num;
    151				     ;		 This procudure	uses a recursive algorithm;
    152				     ;		 Return	1 if N <= 1;
    153				     ; Input:
    154				     ;		 N -  Pass by value parameter
    155				     ;
    156				     ; Output:
    157				     ;		 cx - Value of the Fibonacci series of N
    158				     ;
    159				     ; Registers:
    160				     ;		 cx
    161				     ;
    162				     ; Procedures Called : Main	Program	and Find_Fib
    163				     ;
    164				     ;--------------------------------------------------------
    165				     ;****** SUBROUTINE	DATA SEGMENT ********************************
    166	007B				 .data
    167	      =	WORD PTR [bp+10]	 N     EQU   WORD PTR [bp+10] ;	set N as an alias for [bp+10]
    168
    169				     ;****** SUBROUTINE	CODE SEGMENT ********************************
    170	00BE				 .code
    171	007B			     Find_Fib PROC    NEAR
Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 4
c:proj3.ASM



    172				     ; Save modified registers and initialize base pointer
    173	007B  50			 push ax
    174	007C  53			 push bx
    175	007D  52			 push dx
    176	007E  55			 push bp
    177	007F  8B EC			 mov bp,sp
    178
    179				     ; if (N <=	1)
    180	0081  83 7E 0A 01		 cmp N,1	   ; compare N and 1
    181	0085  7E 18			 jle IF_01	   ; Base Case:	Find_Fib(0) = 1	and Find_Fib(1)	= 1.
    182
    183				     ; Recursive Case: (N > 2):
    184				     ;	 return	(Find_Fib(n - 1) + Find_Fib(n -	2));
    185	0087  8B 46 0A			 mov ax,N	   ; load N into ax
    186	008A  8B D8			 mov bx,ax	   ; load N into bx
    187	008C  48			 dec ax		   ; now ax is n - 1
    188	008D  83 EB 02			 sub bx,2	   ; now bx is n - 2
    189
    190	0090  50			 push ax	   ; passing n - 1 para
    191	0091  E8 FFE7			 call	 Find_Fib  ; Find_Fib(n-1), value returns to cx
    192	0094  8B D1			 mov dx,cx	   ; store the return value into dx
    193
    194	0096  53			 push bx	   ; passing n - 2 para
    195	0097  E8 FFE1			 call	 Find_Fib  ; Find_Fib(n-2), value returns to cx
    196	009A  03 CA			 add cx,dx	   ; store Find_Fib(n-2) + Find_Fib(n-1) into cx
    197
    198	009C  EB 04 90			 jmp ENDIF_01	   ; Recursive Case ends
    199
    200	009F			     IF_01:
    201	009F  B9 0001			 mov cx,1	   ; return 1 in cx, Base Case ends
    202
    203	00A2			     ENDIF_01:		   ; end of IF_01 statement
    204
    205				     ;Restore modified registers
    206	00A2  5D			 pop bp
    207	00A3  5A			 pop dx
    208	00A4  5B			 pop bx
    209	00A5  58			 pop ax
    210
    211				     ; Return to caller	module and clean the N parameter
    212	00A6  C2 0002			 ret	2
    213	00A9			     Find_Fib ENDP	   ; End of Find_Fib procedure
    214
    215
    216				     comment |
    217				     ******* PROCEDURE HEADER **************************************
    218				       PROCEDURE NAME :	Greet
    219				       PURPOSE :  To print an initial greeting to the user
    220				       PROCEDURES CALLED :
    221					 FROM iofar.lib: PutStr, PutCrLf
    222				       CALLED FROM : main program
    223				     |
    224				     ;****** SUBROUTINE	DATA SEGMENT ********************************
    225	00A9				  .data
    226	00BE  20 20 20 20 57 65	6C+  Msgg1     db  '	Welcome	to Fibonacci Series Finding Program!$'
    227	      63 6F 6D 65 20 74	6F+
    228	      20 46 69 62 6F 6E	61+
Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 5
c:proj3.ASM



    229	      63 63 69 20 53 65	72+
    230	      69 65 73 20 46 69	6E+
    231	      64 69 6E 67 20 50	72+
    232	      6F 67 72 61 6D 21	24
    233	00EF  20 20 20 20 50 72	6F+  Msgg2     db  '	Programmer: Jian Zhong $'
    234	      67 72 61 6D 6D 65	72+
    235	      3A 20 4A 69 61 6E	20+
    236	      5A 68 6F 6E 67 20	24
    237	010B  20 20 20 20 44 61	74+  Msgg3     db  '	Date:  30th Apr, 2020 $'
    238	      65 3A 20 20 33 30	74+
    239	      68 20 41 70 72 2C	20+
    240	      32 30 32 30 20 24
    241
    242				     ;****** SUBROUTINE	CODE SEGMENT ********************************
    243	0126				 .code
    244	00A9			     Greet    PROC    near ;
    245				     ; Save registers on the stack
    246	00A9  60			 pusha
    247	00AA  9C			 pushf
    248				     ; Print name of program
    249	00AB  0E E8 0000e		 call	 PutCrLf
    250	00AF  BA 00BEr			 mov dx,OFFSET Msgg1 ; set pointer to 1st greeting message
    251	00B2  B4 09			 mov ah,9	     ; DOS print string	function #
    252	00B4  CD 21			 int 21h	     ; print string
    253	00B6  0E E8 0000e		 call	 PutCrLf
    254				     ; Print name of programmer
    255	00BA  BA 00EFr			 mov dx,OFFSET Msgg2 ; set pointer to 2nd greeting message
    256	00BD  B4 09			 mov ah,9	     ; DOS print string	function #
    257	00BF  CD 21			 int 21h	     ; print string
    258	00C1  0E E8 0000e		 call	 PutCrLf
    259				     ; Print date
    260	00C5  BA 010Br			 mov dx,OFFSET Msgg3 ; set pointer to 3rd greeting message
    261	00C8  B4 09			 mov ah,9	     ; DOS print string	function #
    262	00CA  CD 21			 int 21h	     ; print string
    263	00CC  0E E8 0000e		 call	 PutCrLf
    264	00D0  0E E8 0000e		 call	 PutCrLf
    265				     ; Restore registers from stack
    266	00D4  9D			 popf
    267	00D5  61			 popa
    268				     ; Return to caller	module
    269	00D6  C3			 ret
    270	00D7			     Greet    ENDP ; End Greet procedure
    271
    272				     end    ProgramStart ; End of Entire Program
Turbo Assembler	 Version 3.1	    04/29/20 20:30:22	    Page 6
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??date			Text   "04/29/20"
??filename		Text   "proj3	"
??time			Text   "20:30:22"
??version		Number 030A
@32Bit			Text   0			   #25
@CodeSize		Text   1			   #25
@Cpu			Text   0103H			   #24
@DataSize		Text   1			   #25
@FileName		Text   proj3
@Interface		Text   00h			   #25
@Model			Text   5			   #25
@WordSize		Text   2			   #24	#29  #64  #166	#170  #225  #243
@code			Text   proj3_TEXT		   #25	#25  #64  #170	#243
@curseg			Text   proj3_TEXT		   #29	#64  #166  #170	 #225  #243
@data			Text   DGROUP			   #25	71
@stack			Text   DGROUP			   #25
ENDIF_01		Near   proj3_TEXT:00A2		   198	#203
ENDWHILE_01		Near   proj3_TEXT:004B		   102	#113
END_FOR01		Near   proj3_TEXT:0073		   131	#139
FOR01			Near   proj3_TEXT:005A		   #129	 138
FibEcho			Byte   DGROUP:0092		   #53	116
Find_Fib		Near   proj3_TEXT:007B		   134	#171  191  195
GetDec			Far    proj3_TEXT:---- Extern	   #66	84
Greet			Near   proj3_TEXT:00A9		   75  #244
IF_01			Near   proj3_TEXT:009F		   181	#200
Msgg1			Byte   DGROUP:00BE		   #226	 250
Msgg2			Byte   DGROUP:00EF		   #233	 255
Msgg3			Byte   DGROUP:010B		   #237	 260
N			Text   WORD PTR	[bp+10]		   #167	 180  185
Num			Word   DGROUP:00BA		   #59	86  94	100  128
NumEcho			Byte   DGROUP:0075		   #48	90
ProgramStart		Near   proj3_TEXT:0000		   #68	272
PromptFibNum		Byte   DGROUP:0000		   #30	79
PromptTryAgain		Byte   DGROUP:003C		   #39	106
PutCrLf			Far    proj3_TEXT:---- Extern	   #65	85  96	97  109	 110  119  140	249  253  258  263  264
PutDec			Far    proj3_TEXT:---- Extern	   #66	95  136
TryAgain_01		Near   proj3_TEXT:003A		   101	#105
WHILE_01		Near   proj3_TEXT:0008		   #78	111
i			Word   DGROUP:00BC		   #60	130  133  137

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

DGROUP			Group				   #25	25  71
  STACK			16  0200 Para	Stack	STACK	   #26
  _DATA			16  0126 Word	Public	DATA	   #25	#29  #166  #225
proj3_TEXT		16  00D7 Word	Public	CODE	   #25	25  #64	 64  #170  170	#243  243
